<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>JAVA on JAEM</title>
    <link>http://localhost:1313/posts/java/</link>
    <description>Recent content in JAVA on JAEM</description>
    <generator>Hugo</generator>
    <language>es</language>
    <lastBuildDate>Sun, 25 Dec 2022 21:28:43 -0600</lastBuildDate>
    <atom:link href="http://localhost:1313/posts/java/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Diferencia entre listas y arreglos</title>
      <link>http://localhost:1313/posts/java/diferencia-entre-listas-y-arreglos/</link>
      <pubDate>Sun, 25 Dec 2022 21:28:43 -0600</pubDate>
      <guid>http://localhost:1313/posts/java/diferencia-entre-listas-y-arreglos/</guid>
      <description>&lt;p&gt;Cual es la diferencia entre&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;List&amp;lt;String&amp;gt; cities = new ArrayList&amp;lt;&amp;gt;(); &#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;y&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;String[] cities = {};&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;La principal diferencia entre List&lt;!-- raw HTML omitted --&gt; cities = new ArrayList&amp;lt;&amp;gt;(); y String[] cities = {};&#xA;es &lt;strong&gt;el tipo de objeto que están creando.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;liststring-cities--new-arraylist&#34;&gt;List&lt;!-- raw HTML omitted --&gt; cities = new ArrayList&amp;lt;&amp;gt;();&lt;/h3&gt;&#xA;&lt;p&gt;crea una lista de cadenas utilizando la clase ArrayList de Java. La clase ArrayList es una clase de la biblioteca de Java que proporciona una implementación de la interfaz List. La interfaz List es una de las interfaces más comunes utilizadas en Java para trabajar con colecciones de datos. La clase ArrayList es una implementación de la interfaz List que utiliza un arreglo interno para almacenar los elementos de la lista.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Java Concurrencia y Springboot</title>
      <link>http://localhost:1313/posts/java/java_concurrencia_y_springboot/</link>
      <pubDate>Sat, 24 Dec 2022 19:46:50 -0600</pubDate>
      <guid>http://localhost:1313/posts/java/java_concurrencia_y_springboot/</guid>
      <description>&lt;h3 id=&#34;indice&#34;&gt;Indice&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Requisitos&lt;/li&gt;&#xA;&lt;li&gt;funciones&lt;/li&gt;&#xA;&lt;li&gt;Stream&lt;/li&gt;&#xA;&lt;li&gt;Web Scraper&lt;/li&gt;&#xA;&lt;li&gt;Variables atomicas&lt;/li&gt;&#xA;&lt;li&gt;Concurrencia&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;requisitos-del-sistema&#34;&gt;Requisitos del sistema&lt;/h3&gt;&#xA;&lt;p&gt;IDE&#xA;JDK 11 o posterior&lt;/p&gt;&#xA;&lt;h3 id=&#34;stream&#34;&gt;Stream&lt;/h3&gt;&#xA;&lt;p&gt;Librerias a utilizar&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;import java.util.ArrayList;&#xD;&#xA;import java.util.List;&#xD;&#xA;import java.util.stream.Collectors;&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;p&gt;Clase principal&lt;/p&gt;&#xA;&lt;pre&gt;&lt;code&gt;public class Main {&#xD;&#xA;    public static void main(String[] args) {&#xD;&#xA;        List&amp;lt;String&amp;gt; cities = new ArrayList&amp;lt;&amp;gt;();&#xD;&#xA;        cities.add(&amp;quot;London&amp;quot;);&#xD;&#xA;        cities.add(&amp;quot;New York&amp;quot;);&#xD;&#xA;        cities.add(&amp;quot;Tokyo&amp;quot;);&#xD;&#xA;        cities.add(&amp;quot;Barcelona&amp;quot;);&#xD;&#xA;        cities.add(&amp;quot;Buenos Aires&amp;quot;);&#xD;&#xA;        cities.add(&amp;quot;Bogota&amp;quot;);&#xD;&#xA;        cities.add(&amp;quot;Ciudad de Mexico&amp;quot;);&#xD;&#xA;        cities.add(&amp;quot;Lima&amp;quot;);&#xD;&#xA;&#xD;&#xA;        //Recorrer una lista de forma tradicional&#xD;&#xA;        for (int i = 0; i &amp;lt; cities.size(); i++) {&#xD;&#xA;            System.out.println(cities.get(i));&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        // Recorrer una lista de forma abrebiada&#xD;&#xA;        for (String city : cities) {&#xD;&#xA;            System.out.println(city);&#xD;&#xA;        }&#xD;&#xA;&#xD;&#xA;        //Ejemplo de stream&#xD;&#xA;        cities.stream().forEach(city -&amp;gt; System.out.println(city));&#xD;&#xA;&#xD;&#xA;        /*Exprecion lambda &#xD;&#xA;        ######### city -&amp;gt; System.out.println(city) ###########&#xD;&#xA;        Es tratar de crear una funcion en una sola linea&#xD;&#xA;        (si solo tendara una variable no es nesesario declarar el tipo de la variable &#xD;&#xA;        y si solo tiene una linea de codigo no es nesesario poner las llaves)&#xD;&#xA;        */&#xD;&#xA;&#xD;&#xA;        //Lamar una funcion tradicional e stram (referencia de metodo)&#xD;&#xA;        cities.stream().forEach(Main::printCity);&#xD;&#xA;        /*en ves de ser Main.prinCity, es con doble dos puntos Main::printCity */&#xD;&#xA;        cities.stream().forEach(System.out::println);&#xD;&#xA;&#xD;&#xA;        //Tambien se puede usar directo el foreach, pero el stream aunque no este, siempre se esta usando&#xD;&#xA;        cities.forEach(System.out::println);&#xD;&#xA;&#xD;&#xA;        //Ejecutar un proceso en paralelo&#xD;&#xA;        cities.stream().parallel().forEach(System.out::println);&#xD;&#xA;&#xD;&#xA;        //Al cocatenar metodos con &amp;quot;.&amp;quot; estamos usando el patron de diseño Pipeline&#xD;&#xA;        //Ejemplo de pipeline con filter&#xD;&#xA;        /*cities.stream().filter(city -&amp;gt; city.startsWith(&amp;quot;B&amp;quot;)).forEach(System.out::println);*/&#xD;&#xA;        cities.stream()&#xD;&#xA;        .filter(city -&amp;gt; city.startsWith(&amp;quot;B&amp;quot;))&#xD;&#xA;        .forEach(System.out::println);&#xD;&#xA;&#xD;&#xA;        //Ejemplo de expresion lambda con varias lineas&#xD;&#xA;        cities.stream().filter(city -&amp;gt; {&#xD;&#xA;            boolean result = city.startsWith(&amp;quot;B&amp;quot;);&#xD;&#xA;            return result;&#xD;&#xA;        });&#xD;&#xA;&#xD;&#xA;        //Agregemos otro filto al metodo&#xD;&#xA;        cities.stream()&#xD;&#xA;        .filter(city -&amp;gt; city.startsWith(&amp;quot;B&amp;quot;))&#xD;&#xA;        .filter(city -&amp;gt; city.contains(&amp;quot;n&amp;quot;))&#xD;&#xA;        .forEach(System.out::println);&#xD;&#xA;&#xD;&#xA;        /*Existen dos tipos de metodos&#xD;&#xA;        * 1.- Metodos terminales&#xD;&#xA;        * foreach&#xD;&#xA;        * 2.- Metodos no terminales (NUNCA VAN A SER TERMINALES)&#xD;&#xA;        * filter&#xD;&#xA;        * &#xD;&#xA;        */&#xD;&#xA;&#xD;&#xA;        /*Ejemplo, no lo podmeos guardar en una lista, porque no tiene metodo terminal&#xD;&#xA;        List &amp;lt;String&amp;gt; filttredCities = cities.stream()&#xD;&#xA;        .filter(city -&amp;gt; city.startsWith(&amp;quot;B&amp;quot;))&#xD;&#xA;        .filter(city -&amp;gt; city.contains(&amp;quot;n&amp;quot;));*/&#xD;&#xA;&#xD;&#xA;        //Usando el metodo terminal collect(collectors.toList()) si se podria hacer&#xD;&#xA;        List &amp;lt;String&amp;gt; filttredCities = cities.stream()&#xD;&#xA;        .filter(city -&amp;gt; city.startsWith(&amp;quot;B&amp;quot;))&#xD;&#xA;        .filter(city -&amp;gt; city.contains(&amp;quot;n&amp;quot;))&#xD;&#xA;        .collect(Collectors.toList());&#xD;&#xA;        //El metodo collect permite convertir un stream en una lista&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Metodo filtrar ciudad&#xD;&#xA;    public static boolean filterCity(String city) {&#xD;&#xA;        return city.startsWith(&amp;quot;B&amp;quot;);&#xD;&#xA;    }&#xD;&#xA;&#xD;&#xA;    //Metodo tradicional&#xD;&#xA;    public static void printCity(String city) {&#xD;&#xA;        System.out.println(city);&#xD;&#xA;    }&#xD;&#xA;}&#xD;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&lt;h3 id=&#34;web-scraper&#34;&gt;Web Scraper&lt;/h3&gt;&#xA;&lt;h3 id=&#34;variables-atomicas&#34;&gt;Variables atomicas&lt;/h3&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;Las clases count y count_atomic se encuantran despues de los ejemplos&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
