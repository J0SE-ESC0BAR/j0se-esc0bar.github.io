<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>JAVA on JAEM</title><link>https://jaem.dev/posts/java/</link><description>Recent content in JAVA on JAEM</description><generator>Hugo</generator><language>es</language><lastBuildDate>Sun, 25 Dec 2022 21:28:43 -0600</lastBuildDate><atom:link href="https://jaem.dev/posts/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Diferencia entre listas y arreglos</title><link>https://jaem.dev/posts/java/diferencia-entre-listas-y-arreglos/</link><pubDate>Sun, 25 Dec 2022 21:28:43 -0600</pubDate><guid>https://jaem.dev/posts/java/diferencia-entre-listas-y-arreglos/</guid><description>&lt;p>Cual es la diferencia entre&lt;/p>
&lt;div class="code-block">
 &lt;div class="code-block__header">
 &lt;span class="code-block__lang">TEXT&lt;/span>
 &lt;button class="code-block__copybtn" onclick="copyToClipboard(this)" title="Copiar c칩digo">
 &lt;svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
 &lt;rect x="9" y="9" width="13" height="13" rx="2" ry="2">&lt;/rect>
 &lt;path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1">&lt;/path>
 &lt;/svg>
 &lt;/button>
 &lt;/div>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">List&amp;lt;String&amp;gt; cities = new ArrayList&amp;lt;&amp;gt;(); &lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>&lt;p>y&lt;/p>
&lt;div class="code-block">
 &lt;div class="code-block__header">
 &lt;span class="code-block__lang">TEXT&lt;/span>
 &lt;button class="code-block__copybtn" onclick="copyToClipboard(this)" title="Copiar c칩digo">
 &lt;svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
 &lt;rect x="9" y="9" width="13" height="13" rx="2" ry="2">&lt;/rect>
 &lt;path d="M5 15H4a2 2 0 0 1-2-2V4a2 2 0 0 1 2-2h9a2 2 0 0 1 2 2v1">&lt;/path>
 &lt;/svg>
 &lt;/button>
 &lt;/div>
 &lt;div class="highlight">&lt;pre tabindex="0" class="chroma">&lt;code class="language-text" data-lang="text">&lt;span class="line">&lt;span class="cl">String[] cities = {};&lt;/span>&lt;/span>&lt;/code>&lt;/pre>&lt;/div>
 &lt;/div>&lt;p>La principal diferencia entre List&lt;String> cities = new ArrayList&amp;lt;&amp;gt;(); y String[] cities = {};
es &lt;strong>el tipo de objeto que est치n creando.&lt;/strong>&lt;/p></description></item><item><title>Java Concurrencia y Springboot</title><link>https://jaem.dev/posts/java/java_concurrencia_y_springboot/</link><pubDate>Sat, 24 Dec 2022 19:46:50 -0600</pubDate><guid>https://jaem.dev/posts/java/java_concurrencia_y_springboot/</guid><description>&lt;h3 id="indice">Indice&lt;/h3>
&lt;ul>
&lt;li>Requisitos&lt;/li>
&lt;li>funciones&lt;/li>
&lt;li>Stream&lt;/li>
&lt;li>Web Scraper&lt;/li>
&lt;li>Variables atomicas&lt;/li>
&lt;li>Concurrencia&lt;/li>
&lt;/ul>
&lt;h3 id="requisitos-del-sistema">Requisitos del sistema&lt;/h3>
&lt;p>IDE
JDK 11 o posterior&lt;/p>
&lt;h3 id="stream">Stream&lt;/h3>
&lt;p>Librerias a utilizar&lt;/p>
&lt;pre>&lt;code>import java.util.ArrayList;
import java.util.List;
import java.util.stream.Collectors;
&lt;/code>&lt;/pre>
&lt;p>Clase principal&lt;/p>
&lt;pre>&lt;code>public class Main {
 public static void main(String[] args) {
 List&amp;lt;String&amp;gt; cities = new ArrayList&amp;lt;&amp;gt;();
 cities.add(&amp;quot;London&amp;quot;);
 cities.add(&amp;quot;New York&amp;quot;);
 cities.add(&amp;quot;Tokyo&amp;quot;);
 cities.add(&amp;quot;Barcelona&amp;quot;);
 cities.add(&amp;quot;Buenos Aires&amp;quot;);
 cities.add(&amp;quot;Bogota&amp;quot;);
 cities.add(&amp;quot;Ciudad de Mexico&amp;quot;);
 cities.add(&amp;quot;Lima&amp;quot;);

 //Recorrer una lista de forma tradicional
 for (int i = 0; i &amp;lt; cities.size(); i++) {
 System.out.println(cities.get(i));
 }

 // Recorrer una lista de forma abrebiada
 for (String city : cities) {
 System.out.println(city);
 }

 //Ejemplo de stream
 cities.stream().forEach(city -&amp;gt; System.out.println(city));

 /*Exprecion lambda 
 ######### city -&amp;gt; System.out.println(city) ###########
 Es tratar de crear una funcion en una sola linea
 (si solo tendara una variable no es nesesario declarar el tipo de la variable 
 y si solo tiene una linea de codigo no es nesesario poner las llaves)
 */

 //Lamar una funcion tradicional e stram (referencia de metodo)
 cities.stream().forEach(Main::printCity);
 /*en ves de ser Main.prinCity, es con doble dos puntos Main::printCity */
 cities.stream().forEach(System.out::println);

 //Tambien se puede usar directo el foreach, pero el stream aunque no este, siempre se esta usando
 cities.forEach(System.out::println);

 //Ejecutar un proceso en paralelo
 cities.stream().parallel().forEach(System.out::println);

 //Al cocatenar metodos con &amp;quot;.&amp;quot; estamos usando el patron de dise침o Pipeline
 //Ejemplo de pipeline con filter
 /*cities.stream().filter(city -&amp;gt; city.startsWith(&amp;quot;B&amp;quot;)).forEach(System.out::println);*/
 cities.stream()
 .filter(city -&amp;gt; city.startsWith(&amp;quot;B&amp;quot;))
 .forEach(System.out::println);

 //Ejemplo de expresion lambda con varias lineas
 cities.stream().filter(city -&amp;gt; {
 boolean result = city.startsWith(&amp;quot;B&amp;quot;);
 return result;
 });

 //Agregemos otro filto al metodo
 cities.stream()
 .filter(city -&amp;gt; city.startsWith(&amp;quot;B&amp;quot;))
 .filter(city -&amp;gt; city.contains(&amp;quot;n&amp;quot;))
 .forEach(System.out::println);

 /*Existen dos tipos de metodos
 * 1.- Metodos terminales
 * foreach
 * 2.- Metodos no terminales (NUNCA VAN A SER TERMINALES)
 * filter
 * 
 */

 /*Ejemplo, no lo podmeos guardar en una lista, porque no tiene metodo terminal
 List &amp;lt;String&amp;gt; filttredCities = cities.stream()
 .filter(city -&amp;gt; city.startsWith(&amp;quot;B&amp;quot;))
 .filter(city -&amp;gt; city.contains(&amp;quot;n&amp;quot;));*/

 //Usando el metodo terminal collect(collectors.toList()) si se podria hacer
 List &amp;lt;String&amp;gt; filttredCities = cities.stream()
 .filter(city -&amp;gt; city.startsWith(&amp;quot;B&amp;quot;))
 .filter(city -&amp;gt; city.contains(&amp;quot;n&amp;quot;))
 .collect(Collectors.toList());
 //El metodo collect permite convertir un stream en una lista
 }

 //Metodo filtrar ciudad
 public static boolean filterCity(String city) {
 return city.startsWith(&amp;quot;B&amp;quot;);
 }

 //Metodo tradicional
 public static void printCity(String city) {
 System.out.println(city);
 }
}
&lt;/code>&lt;/pre>
&lt;h3 id="web-scraper">Web Scraper&lt;/h3>
&lt;h3 id="variables-atomicas">Variables atomicas&lt;/h3>
&lt;blockquote>
&lt;p>Las clases count y count_atomic se encuantran despues de los ejemplos&lt;/p></description></item></channel></rss>